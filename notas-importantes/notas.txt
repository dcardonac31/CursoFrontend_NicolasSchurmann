---------------------------
Api-REST
---------------------------


              {       } 
              {       } 
cliente <->   {  Api  } <->  [base de datos]
              {       } 
              {       } 

Se utilizan verbos HTTP para la comunicación

- GET: Se utiliza para traer información, listar información
- POST: Crear un recurso
- PUT: Reemplazar un recurso
- PATCH: Actualizar un recurso o reemplazar parcialmente
- DELETE: Eliminar un recurso

Para conectar a la API, hay que indicar un recurso, por lo general entidades en la 
base de datos:
-Usuarios, pedidos, productos, tweets, etc...


VERBO                         LLAMADO RECURSO (RUTA)      CODIGO DEVOLUCION
GET                           /users    users/:id          200
POST                          /users                       201
*PUT                           /users/:id                  204
*PATCH                         /users/:id                  204
DELETE                        /users/:id                   204

Algunas API utilizan PUT y PATCH para la misma función, que es actualizar parcialmente
un recurso.



---------------------------
Server less
---------------------------
Clientes <-> [Servidores] <-> {balanceador de carga} <-> [Servidores auxiliares]

- Una o mas personas controlan y monitorean toda esta operación, este es un modelo antiguo.


En server less o FaaS (Function as a service) se encargan de toda esta operación


          {/users}------> {BD[Js]}
             ^
             |
  o          |
 -|-  >>>> [Js]
  /\


  
          {/users}------> {BD[Js]}
                                      -No se administan servidores
                                      -Es mas barato, se paga por uso
  o          
 -|-  >>>> [Js]
  /\


  Ejecución en frio
  [Js] <->                   Solo tiene en memoria los archivos ejecutados recientemente
  [Js] <->                   El resto de archivos son enviados al disco del servidor
  [Js] <->     {/users}
  [Js] <->
  [Js] <->

    Ejecución en caliente
  [Js] <->                   Solo tiene en memoria los archivos ejecutados recientemente
  [Js] <->                   Todos los archivos deben estar en la misma ruta
  [Js] <->     {/users}
  [Js] <->
  [Js] <->

  Proveedor FaaS gratuito
  https://vercel.com/


---------------------------
¿Que aplicación vamos a contruir?
---------------------------

                 Almuerzi
  o          
 -|-                  comida                 o
  /\                                        -|- chef
  o                   carro                  /\ 
 -|-                  transportador
  /\  



  Platos            
  
  - id
  -name
  - descr

Pedidos
-id
-meal_id
-user_id


-------------------
BD NoSQL: MongoDB
-------------------
mongodb+srv://almuerzimaster:<password>@cluster0.fnkeb.mongodb.net/<dbname>?retryWrites=true&w=majority
mongodb+srv://almuerzimaster:<colombia2020>@cluster0.fnkeb.mongodb.net/<almuerzi>?retryWrites=true&w=majority

https://cloud.mongodb.com/

-------------------
Instalando dependencias y conectandose a mongo atlas
-------------------
npm i -S express mongoose body-parser cors

- mongoose: libreria para conectar a mongodb, es una capa encima del driver de mongodb

- body-parser: transforma las peticiones al servidor en JSON

- cors: libreria que permite habilitar la petición desde urls distintas, con esto se evita un error 
cuando se trabaja desde local, que dice que no esta habilitado para trabajar desde diferentes
dominios.
